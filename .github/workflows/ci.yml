name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Security and Code Quality
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 🔒 Run Bandit Security Scan
        run: |
          pip install bandit
          bandit -r core/ mesh/ security/ -f json -o security-report.json
          
      - name: 📊 Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.json

  # Python Backend Tests
  python-tests:
    name: 🐍 Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
          
      - name: 🧪 Run Python tests
        run: |
          pytest tests/ --cov=core --cov=mesh --cov=security --cov-report=xml
          
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: python
          name: python-${{ matrix.python-version }}

  # Node.js Frontend Tests
  node-tests:
    name: 🌐 Node.js Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20']
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🎨 Run ESLint
        run: npm run lint
        
      - name: 🧪 Run Jest tests
        run: npm run test:coverage
        
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: node-${{ matrix.node-version }}

  # Build and Test
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [security, python-tests, node-tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 📊 Analyze bundle size
        run: npm run analyze
        
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            dist/
            build/

  # E2E Tests
  e2e-tests:
    name: 🧪 E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps
        
      - name: 🧪 Run E2E tests
        run: npm run e2e
        
      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/

  # Docker Build
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: liberation-system:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deployment
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build, e2e-tests, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying Liberation System to production..."
          # Add your deployment commands here
          
      - name: 📢 Notify deployment
        run: |
          echo "✅ Liberation System deployed successfully!"
          echo "🌐 Available at: https://liberation-system.tiation.dev"

  # Metrics and Monitoring
  metrics:
    name: 📊 Performance Metrics
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📊 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
